AWSTemplateFormatVersion: "2010-09-09"
Description: Amazon Transcribe News Media Analysis (uksb-TODO)
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Environment:
      Variables:
        API_GATEWAY: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/PROD
        COGNITO_IDENTITY_POOL: !Ref CognitoIdentityPool
        FROM_BUCKET: media-analysis-demo
        MAX_TASKS: !Ref MaxTasksCapacity
        REGION: !Ref AWS::Region
        TO_BUCKET: !Ref WebUIBucket
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  MaxTasksCapacity:
    Type: Number
    Default: 10

Outputs:
  url:
    Value: !Sub https://${WebUIBucket}.s3.amazonaws.com/index.html
    Description: WebUI URL

Resources:
  ApiGatewayInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: MediaAnalysis-setup-S3-fc
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 's3:*'
              Resource: '*'
        - PolicyName: MediaAnalysis-cloudwatch-logs
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 'logs:*'
              Resource: 'arn:aws:logs:*:*:*'

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: MediaAnalysisIdentityPool
      AllowUnauthenticatedIdentities: true

  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt ApiGatewayInvokeRole.Arn
        unauthenticated: !GetAtt ApiGatewayInvokeRole.Arn

  DbReadRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

  DbWriteRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

  LambdaSetup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MediaAnalysisSetup
      Runtime: nodejs8.10
      Handler: index.handler
      CodeUri: ../functions/setup/
      Description: Custom Lambda resource for the Media Analysis Cloudformation Stack
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt CustomResourceRole.Arn

  RestApi:
    Type: AWS::Serverless::Api
    Name: MediaAnalysisAPI
    Properties:
      StageName: PROD
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: 2.0
        info:
          version: 1.0
          title: MediaAnalysisAPI
        basePath: /PROD
        paths:
          /poll:
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials: !GetAtt DbReadRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        {
                          "fragments": [
                            #foreach($elem in $inputRoot.Items) {
                              "timestamp": $elem.FragmentTimestamp.N,
                              "transcript": "$elem.Transcript.S",
                              "isPartial": $elem.IsPartial.BOOL
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${TranscriptDynamoTable}",
                      "IndexName": "MediaAnalysisLSI",
                      "KeyConditionExpression": "VideoUrl = :vurl AND FragmentTimestamp BETWEEN :from AND :to",
                      "ProjectionExpression": "FragmentTimestamp,Transcript,IsPartial",
                      "ExpressionAttributeValues": {
                        ":vurl": {
                          "S": "$util.urlDecode($input.params().querystring.get('videoUrl'))"
                        },
                        ":from": {
                          "N": "$input.params().querystring.get('from')"
                        },
                        ":to": {
                          "N": "$input.params().querystring.get('to')"
                        }
                      }
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
          /tasks:
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials: !GetAtt DbReadRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        {
                          "tasks": [
                            #foreach($elem in $inputRoot.Items) {
                              "videoUrl": "$elem.VideoUrl.S",
                              "taskStatus": "$elem.TaskStatus.S",
                              "taskId": "$elem.TaskId.S"
                            }#if($foreach.hasNext),#end
                            #end
                          ]
                        }
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${TasksDynamoTable}",
                      "ProjectionExpression": "VideoUrl, TaskStatus, TaskId",
                      "ConsistentRead": true
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
          /tasks/{videoUrl}:
            delete:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials: !GetAtt DbWriteRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
                    responseTemplates:
                      application/json: |
                        {
                          "ok": true
                        }
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${TasksDynamoTable}",
                      "Key": {
                        "VideoUrl": {
                          "S": "$util.urlDecode($input.params('videoUrl'))"
                        }
                      }
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
            put:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials: !GetAtt DbWriteRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
                    responseTemplates:
                      application/json: |
                        {
                          "ok": true
                        }
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${TasksDynamoTable}",
                      "Item": {
                        "VideoUrl": {
                          "S": "$util.urlDecode($input.params('videoUrl'))"
                        },
                        "TaskStatus": {
                          "S": "WAITING"
                        }
                      }
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4

  TasksDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MediaAnalysisTasks
      AttributeDefinitions: 
        - 
          AttributeName: VideoUrl
          AttributeType: S
      KeySchema: 
        - 
          AttributeName: VideoUrl
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  TranscriptDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MediaAnalysisTranscript
      AttributeDefinitions: 
        - 
          AttributeName: VideoUrl
          AttributeType: S
        - 
          AttributeName: ResultId
          AttributeType: S
        - 
          AttributeName: FragmentTimestamp
          AttributeType: N
      KeySchema: 
        - 
          AttributeName: VideoUrl
          KeyType: HASH
        - 
          AttributeName: ResultId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      LocalSecondaryIndexes: 
        - 
          IndexName: MediaAnalysisLSI
          KeySchema: 
            - 
              AttributeName: VideoUrl
              KeyType: HASH
            - 
              AttributeName: FragmentTimestamp
              KeyType: RANGE
          Projection: 
            ProjectionType: ALL

  SetupWebUI:
    Type: Custom::Setup
    Properties:
      ServiceToken: !GetAtt LambdaSetup.Arn
      Region: !Ref AWS::Region

  WebUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET]
          AllowedOrigins: ['*']
          Id: MediaAnalysisCorsRule
          MaxAge: 3600